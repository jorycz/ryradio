---
- hosts: 127.0.0.1
  connection: local
  become: true
  become_user: root
  tasks:
    - name: Update APT package CACHE
      apt: update_cache=yes cache_valid_time=600
    - name: Installing base packages - this will take LONG TIME on RPi
      package:
        name: "{{ pcgs }}"
        state: present
      vars:
        pcgs:
          - vim
          - apache2
          - php
          - mpg123
          - postfix
          - mailutils
    - name: Find ALL php.ini in /etc/php/
      find:
        paths: /etc/php/
        patterns: php.ini
        recurse: yes
      register: files_matched
    - name: Configuring ALL php.ini in /etc/php/
      lineinfile:
        destfile: "{{ item.path }}"
        regexp: "^disable_functions ="
        line: "disable_functions = pcntl_alarm"
        state: present
      with_items:
        - "{{ files_matched.files }}"
    - name: Add www-data to users group
      shell: usermod -a -G adm,audio,video,plugdev,games,users,input,netdev www-data
    - name: Give www-data bash shell
      shell: usermod -s /bin/bash www-data
    - name: TEST for existing record in /etc/rc.local
      shell: grep "runAfterBoot.sh" /etc/rc.local
      ignore_errors: true
      register: test_grep_rclocal
    - name: Configuring /etc/rc.local
      lineinfile:
        destfile: /etc/rc.local
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^exit ', line: '/var/www/html/scripts/runAfterBoot.sh & exit 0' }
      when: test_grep_rclocal.stdout == ""
    - name: Ensure /etc/postfix/sasl_passwd exist
      file:
        path: /etc/postfix/sasl_passwd
        owner: root
        group: root
        mode: 0400
        state: touch
    - name: TEST for existing [smtp.gmail.com]:587 line in sasl_passwd
      shell: grep "smtp.gmail.com" /etc/postfix/sasl_passwd
      ignore_errors: true
      register: test_grep_sasl
    - name: Configuring /etc/postfix/sasl_passwd
      lineinfile:
        destfile: /etc/postfix/sasl_passwd
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^[smtp.gmail.com]:587 username', line: '[smtp.gmail.com]:587 username@gmail.com:<PASSWORD>' }
      when: test_grep_sasl.stdout == ""
    - name: Adding Thawte CA to Posfix CA certs
      #shell: cat /etc/ssl/certs/thawte_Primary_Root_CA.pem | tee -a /etc/postfix/cacert.pem
      shell: cat /etc/ssl/certs/GlobalSign* | tee -a /etc/postfix/cacert.pem
    - name: MESSAGE !
      debug:
        msg:
          - 'If google change CA in future, right CA could be found like this ls /etc/ssl/certs/|grep -i thawte'
    - name: Configuring /etc/postfix/main.cf
      lineinfile:
        destfile: /etc/postfix/main.cf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
      with_items:
        - { regexp: '^relayhost =', line: 'relayhost = [smtp.gmail.com]:587' }
        - { regexp: '^smtp_sasl_auth_enable =', line: 'smtp_sasl_auth_enable = yes' }
        - { regexp: '^smtp_sasl_password_maps =', line: 'smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd' }
        - { regexp: '^smtp_sasl_security_options =', line: 'smtp_sasl_security_options = noanonymous' }
        - { regexp: '^smtp_tls_CAfile =', line: 'smtp_tls_CAfile = /etc/postfix/cacert.pem' }
        - { regexp: '^smtp_use_tls =', line: 'smtp_use_tls = yes' }
    - name: Creating CRON for Radio Running Check
      cron:
        name: "Radio running check"
        minute: "*/5"
        job: "/var/www/html/scripts/runRadioIfNotRunning.sh"
    - name: Creating CRON for Radio Night Volume Check
      cron:
        name: "Radio Night Volume Check"
        minute: "*/10"
        job: "/var/www/html/scripts/nightDayVolume.sh"
    - name: Removing /var/www/html/index.htm*
      shell: rm -rf /var/www/html/index.htm*
    - name: Ensure /var/www/html/config/ exist
      file:
        path: /var/www/html/config/
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
        mode: 0755
    - name: Uploading radio config files to /var/www/html/config/
      copy:
        src: "{{ item }}"
        dest: /var/www/html/config/
        owner: www-data
        group: www-data
        mode: 0644
      with_fileglob:
        - "varwwwhtml/config/*"
    # - name: Configuring /etc/fstab for dynamic content to use RAM
    #   lineinfile:
    #     destfile: /etc/fstab
    #     regexp: "{{ item.regexp }}"
    #     line: "{{ item.line }}"
    #     state: present
    #   with_items:
    #     - { regexp: '^tmpfs /var/log tmpfs', line: 'tmpfs /var/log tmpfs defaults,noatime,nosuid,mode=0755,size=96m 0 0' }
    #     - { regexp: '^tmpfs /var/log/apache2 tmpfs', line: 'tmpfs /var/log/apache2 tmpfs defaults,noatime,nosuid,mode=0755,size=16m 0 0' }
    #     - { regexp: '^tmpfs /tmp tmpfs', line: 'tmpfs /tmp tmpfs defaults,noatime,nosuid,mode=0755,size=16m 0 0' }
    #     - { regexp: '^tmpfs /var/tmp tmpfs', line: 'tmpfs /var/tmp tmpfs defaults,noatime,nosuid,mode=0755,size=8m 0 0' }
    #     - { regexp: '^tmpfs /var/mail tmpfs', line: 'tmpfs /var/mail tmpfs defaults,noatime,nosuid,mode=0755,size=4m 0 0' }
    #     - {regexp: '^tmpfs /var/spool/rsyslog tmpfs', line: 'tmpfs /var/spool/rsyslog tmpfs defaults,noatime,nosuid,mode=0755,size=4m 0 0' }
    - name: MESSAGE !
      debug:
        msg:
          - '========== DO NOT FORGET if you want to get email after every REBOOT ========='
          - 'Run: sudo -i to switch to root user.'
          - '..........................................................'
          - 'Use nano or vim text editor for changes below:'
          - ' - Put real gmail username and password for sending mail to config like: nano /etc/postfix/sasl_passwd like:'
          - ' [smtp.gmail.com]:587 EMAIL@ADDRESS:PASSWORD'
          - ' - Run: postmap /etc/postfix/sasl_passwd'
          - ' - Put ANY real email address for receiving mail to recipients like: sudo nano /var/www/html/config/recipients'
          - 'Google does NOT accept mail from RPi for first time, so you need to wait at least 30 minutes for first mail to arrive.'
          - 'This is part of Google SPAM protection so it is OK. Just wait for mail. You can check mail queue by running mailq under pi.'
          - '..........................................................'
          - 'Reboot RPi using: shutdown -r now'
          - '..........................................................'

